package controller;

import dao.CategoryDAO;
import dao.SubjectDAO;
import dao.SubjectDescriptionImageDAO;
import dao.UserDAO;
import dto.SubjectDTO;
import entity.Category;
import entity.Subject;
import entity.SubjectDescriptionImage;
import entity.User;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.MultipartConfig;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.*;
import service.SubjectService;
import util.ImageUploader;

import java.io.IOException;
import java.time.Instant;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

@WebServlet(name = "CreateSubjectServlet", urlPatterns = {"/create-subject"})
@MultipartConfig(
        fileSizeThreshold = 1024 * 1024,         // 1MB (bộ nhớ tạm)
        maxFileSize = 50 * 1024 * 1024,          // 50MB cho mỗi file
        maxRequestSize = 100 * 1024 * 1024       // 100MB cho toàn bộ form
)
public class CreateSubjectServlet extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        CategoryDAO categoryDAO = new CategoryDAO();
        UserDAO userDAO = new UserDAO();

        List<Category> categories = categoryDAO.getAllCategory();
        ArrayList<User> experts = userDAO.getAllExpert();

        request.setAttribute("categories", categories);
        request.setAttribute("experts", experts);
        request.getRequestDispatcher("subject_create.jsp").forward(request, response);
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        String categoryIdParam = request.getParameter("subjectCategory");
        String ownerIdParam = request.getParameter("owner");
        String name = request.getParameter("subjectName");
        String status = request.getParameter("status");
        String rawDescription = request.getParameter("subjectDescription");
        String subjectDescription = rawDescription != null ? rawDescription.replace("\n", "\\n") : "";
        String tagLine = request.getParameter("tagLine");
        boolean isFeatured = request.getParameter("featured") != null;
        Part thumbnailPart = request.getPart("thumbnail");

        int categoryId = 0;
        int ownerId = 0;

        try {
            categoryId = Integer.parseInt(categoryIdParam);
            if (ownerIdParam != null && !ownerIdParam.isEmpty()) {
                ownerId = Integer.parseInt(ownerIdParam);
            } else {
                // If no owner specified, use current user as owner
                User currentUser = (User) request.getSession().getAttribute("user");
                if (currentUser != null) {
                    ownerId = currentUser.getId();
                }
            }
        } catch (NumberFormatException e) {
            System.out.println("Number format exception: " + e.getMessage());
            request.setAttribute("errorMessage", "Invalid number format in form data.");
            doGet(request, response);
            return;
        }

        // Validate required fields
        if (name == null || name.trim().isEmpty() ||
                categoryId == 0 || ownerId == 0 ||
                subjectDescription == null || subjectDescription.trim().isEmpty() ||
                tagLine == null || tagLine.trim().isEmpty() ||
                thumbnailPart == null || thumbnailPart.getSize() == 0) {

            request.setAttribute("errorMessage", "All required fields must be filled.");
            doGet(request, response);
            return;
        }

        SubjectDAO subjectDAO = new SubjectDAO();
        Subject subject = new Subject();

        // Set subject properties (ID will be auto-generated by database)
        subject.setName(name.trim());
        subject.setLongDescription(subjectDescription.trim());
        subject.setTagLine(tagLine.trim());
        subject.setFeaturedSubject(isFeatured);
        subject.setPublished(status != null && status.equals("Published"));
        subject.setCategoryId(categoryId);
        subject.setOwnerId(ownerId);
        subject.setUpdateDate(LocalDateTime.now());

        // Handle thumbnail upload
        String thumbnailName = null;
        if (thumbnailPart.getSize() > 0) {
            String thumbnailDirectory = getServletContext().getRealPath("assets/images/thumbnail/subject");
            String thumbnailOriginalName = thumbnailPart.getSubmittedFileName();
            String extension = thumbnailOriginalName.substring(thumbnailOriginalName.lastIndexOf("."));
            thumbnailName = "subject_" + System.currentTimeMillis() + extension;

            try {
                ImageUploader.saveImage(thumbnailDirectory, thumbnailName, thumbnailPart);
                subject.setThumbnail(thumbnailName);
            } catch (Exception e) {
                System.out.println("Error saving thumbnail: " + e.getMessage());
                request.setAttribute("errorMessage", "Error uploading thumbnail image.");
                doGet(request, response);
                return;
            }
        }

        // Insert the subject and get the generated ID
        boolean subjectInserted = subjectDAO.insertSubject(subject);

        if (!subjectInserted) {
            request.setAttribute("errorMessage", "Failed to create subject. Please try again.");
            doGet(request, response);
            return;
        }

        // Get the newly created subject ID (you may need to modify insertSubject to return the ID)
        // For now, we'll get it by querying the latest subject with matching details
        Subject createdSubject = subjectDAO.getLatestSubjectByNameAndOwner(name.trim(), ownerId);
        if (createdSubject == null) {
            System.out.println("Could not retrieve created subject ID");
            request.setAttribute("errorMessage", "Subject created but could not process description images.");
            doGet(request, response);
            return;
        }

        int newSubjectId = createdSubject.getId();

        // Handle subject description images
        SubjectDescriptionImageDAO subjectDescriptionImageDAO = new SubjectDescriptionImageDAO();
        String descriptionImageDirectory = getServletContext().getRealPath("assets/images/subject_description");

        // Get all parts from form
        Collection<Part> imageParts = request.getParts();
        List<Part> descriptionImageParts = new ArrayList<>();

        // Get all images with name = "subjectDescriptionImageInput"
        for (Part part : imageParts) {
            if ("subjectDescriptionImageInput".equals(part.getName()) && part.getSize() > 0) {
                descriptionImageParts.add(part);
            }
        }

        // Get all captions
        String[] captions = request.getParameterValues("subjectDescriptionImageCaption");
        List<String> descriptionImageCaptions = new ArrayList<>();
        if (captions != null) {
            for (String caption : captions) {
                descriptionImageCaptions.add(caption != null ? caption.trim() : "");
            }
        }

        // Process description images
        for (int i = 0; i < descriptionImageParts.size(); i++) {
            Part imagePart = descriptionImageParts.get(i);
            String caption = i < descriptionImageCaptions.size() ? descriptionImageCaptions.get(i) : "";

            if (imagePart.getSize() > 0) {
                try {
                    String originalName = imagePart.getSubmittedFileName();
                    String extension = originalName.substring(originalName.lastIndexOf("."));
                    String newImageName = "subject_desc_" + newSubjectId + "_" + Instant.now().toEpochMilli() + extension;

                    // Save image file
                    ImageUploader.saveImage(descriptionImageDirectory, newImageName, imagePart);

                    // Create database record
                    SubjectDescriptionImage newImage = new SubjectDescriptionImage();
                    newImage.setSubjectId(newSubjectId);
                    newImage.setUrl(newImageName);
                    newImage.setCaption(caption);

                    boolean imageInserted = subjectDescriptionImageDAO.add(newImage);
                    if (imageInserted) {
                        System.out.println("Added new description image: " + newImageName);
                    } else {
                        System.out.println("Failed to add description image to database: " + newImageName);
                    }
                } catch (Exception e) {
                    System.out.println("Error processing description image " + i + ": " + e.getMessage());
                }
            }
        }

        // Set success message and redirect
        HttpSession session = request.getSession();
        session.setAttribute("toastNotification", "Subject has been created successfully.");

        response.sendRedirect("manage_subject_list.jsp");
    }
}